// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
	username, balance, email
) VALUES (
	$1, $2, $3
)
RETURNING id, username, balance, email, created_at
`

type CreateAccountParams struct {
	Username string 
	Balance  int64
	Email    sql.NullString
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Username, arg.Balance, arg.Email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
	from_account, to_account, amount
) VALUES (
	$1, $2, $3
)
RETURNING id, from_account, to_account, amount, created_at
`

type CreateTransactionParams struct {
	FromAccount sql.NullInt64
	ToAccount   sql.NullInt64
	Amount      sql.NullInt64
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction, arg.FromAccount, arg.ToAccount, arg.Amount)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromAccount,
		&i.ToAccount,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getTx = `-- name: GetTx :one
SELECT id, from_account, to_account, amount, created_at FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTx(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTx, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromAccount,
		&i.ToAccount,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, balance, email, created_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, balance, email, created_at FROM accounts
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email sql.NullString) (Account, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, balance, email, created_at FROM accounts
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, balance, email, created_at FROM accounts
ORDER BY username
`

func (q *Queries) GetUsers(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Balance,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
